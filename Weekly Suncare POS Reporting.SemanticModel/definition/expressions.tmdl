expression Eucerin_Walgreens =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Walgreens-Eucerin_New" = Bronze_Layer{[Schema="dbo",Item="Walgreens-Eucerin_New"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(#"dbo_Walgreens-Eucerin_New",{{"Inserted_Date", type datetime}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Changed Type",{{"Inserted_Date", type date}})
		in
		    #"Changed Type1"
	lineageTag: 98508c4d-ed52-4d0d-b70b-5a989f4ee894
	queryGroup: Eucerin

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Coppertone_Walgreens =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Walgreens-Coppertone_New" = Bronze_Layer{[Schema="dbo",Item="Walgreens-Coppertone_New"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(#"dbo_Walgreens-Coppertone_New",{{"Inserted_Date", type datetime}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Changed Type",{{"Inserted_Date", type date}})
		in
		    #"Changed Type1"
	lineageTag: b876f14f-6027-43ed-b042-770902065f31
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Coppertone_Walmart =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Walmart-coppertone" = Bronze_Layer{[Schema="dbo",Item="Walmart-coppertone"]}[Data]
		in
		    #"dbo_Walmart-coppertone"
	lineageTag: 65fd0f3d-c6fc-447e-baea-b1c75c83f410
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Eucerin_Target =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    dbo_Target_EUCERIN_11 = Bronze_Layer{[Schema="dbo",Item="Target_EUCERIN_11"]}[Data]
		in
		    dbo_Target_EUCERIN_11
	lineageTag: 21530884-571a-43b9-a9f8-36511d4ade9d
	queryGroup: Eucerin

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Coppertone_Target =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    dbo_Target_COPPERTONE_11 = Bronze_Layer{[Schema="dbo",Item="Target_COPPERTONE_11"]}[Data]
		in
		    dbo_Target_COPPERTONE_11
	lineageTag: 34ac0bc6-22ab-4545-9bf0-b45d2b1dff86
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Coppertone_CVS =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_CVS-Coppertone" = Bronze_Layer{[Schema="dbo",Item="CVS-Coppertone"]}[Data]
		in
		    #"dbo_CVS-Coppertone"
	lineageTag: 8e5f6706-63e4-477c-99e8-5a08849df449
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Eucerin_CVS =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_CVS-Eucerin_Sun" = Bronze_Layer{[Schema="dbo",Item="CVS-Eucerin_Sun"]}[Data],
		    #"Replaced Value" = Table.ReplaceValue(#"dbo_CVS-Eucerin_Sun","Eucerin Sun","EUCERIN SUN",Replacer.ReplaceText,{"Product"})
		in
		    #"Replaced Value"
	lineageTag: cdd2a57c-3083-470b-af18-00400239bff5
	queryGroup: Eucerin

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Eucerin Kroger' =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Kroger-Eucerin" = Bronze_Layer{[Schema="dbo",Item="Kroger-Eucerin"]}[Data],
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"dbo_Kroger-Eucerin", "Store", Splitter.SplitTextByDelimiter("#", QuoteStyle.Csv), {"Store.1", "Store.2"}),
		    #"Filtered Rows" = Table.SelectRows(#"Split Column by Delimiter1", each ([Date] <> null)),
		    #"Changed Type" = Table.TransformColumnTypes(#"Filtered Rows",{{"Store.1", Int64.Type}, {"Store.2", Int64.Type}}),
		    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Changed Type", {{"Store.1", type text}, {"Store.2", type text}}, "en-IN"),{"Store.1", "Store.2"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"Store"),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Merged Columns",{{"Store", type number}})
		in
		    #"Changed Type1"
	lineageTag: 6e6aefc3-4041-418e-9e3b-dc8703e3729a
	queryGroup: Eucerin

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Coppertone Kroger' =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Kroger-Coppertone" = Bronze_Layer{[Schema="dbo",Item="Kroger-Coppertone"]}[Data],
		    #"Split Column by Delimiter1" = Table.SplitColumn(#"dbo_Kroger-Coppertone", "Store", Splitter.SplitTextByDelimiter("#", QuoteStyle.Csv), {"Store.1", "Store.2"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter1",{{"Store.1", Int64.Type}, {"Store.2", Int64.Type}}),
		    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Changed Type", {{"Store.1", type text}, {"Store.2", type text}}, "en-IN"),{"Store.1", "Store.2"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"Store"),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Merged Columns",{{"Store", type number}}),
		    #"Filtered Rows" = Table.SelectRows(#"Changed Type1", each true)
		in
		    #"Filtered Rows"
	lineageTag: 89aad179-4751-4c2f-8519-99664da8ea4b
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression Eucerin_Walmart =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Walmart-Eucerin" = Bronze_Layer{[Schema="dbo",Item="Walmart-Eucerin"]}[Data]
		in
		    #"dbo_Walmart-Eucerin"
	lineageTag: 75f734f1-18c4-45d4-8db3-c50ff6191c24
	queryGroup: Eucerin

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Retailer Image (2)' =
		let
		    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("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", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Retailers = _t, Column1 = _t, Column2 = _t]),
		    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Retailers", type text}, {"Column1", type text}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Changed Type",{{"Column2", "ÙRL link"}}),
		    #"Filtered Rows" = Table.SelectRows(#"Renamed Columns", each ([Retailers] <> "Test" and [Retailers] <> "Test2"))
		in
		    #"Filtered Rows"
	lineageTag: 00ab87af-e8de-4b52-b867-42b2890a2ebd

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Coppertone Kroger (2)' =
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Kroger-Coppertone" = Bronze_Layer{[Schema="dbo",Item="Kroger-Coppertone"]}[Data],
		    #"Changed Type" = Table.TransformColumnTypes(#"dbo_Kroger-Coppertone",{{"Store", type text}}),
		    #"Split Column by Delimiter" = Table.SplitColumn(#"Changed Type", "Store", Splitter.SplitTextByDelimiter("#", QuoteStyle.Csv), {"Store.1", "Store.2"}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Store.1", Int64.Type}, {"Store.2", Int64.Type}})
		in
		    #"Changed Type1"
	lineageTag: 6158e686-a1b8-45bd-b94a-d8ddf1cea2be
	queryGroup: Coppertone

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Errors in Suncare Coverage Planning' =
		let
		Source = #"Suncare Coverage Planning",
		  #"Detected Type Mismatches" = let
		    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Source, Table.ColumnsOfType(Source, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),
		    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),
		    fieldNames = Record.FieldNames(recordTypeFields),
		    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),
		    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = "The type of the value does not match the type of the column.", Detail = v], fieldTypes{i}})
		in
		    Table.TransformColumns(Source, pairs),
		  #"Added Index" = Table.AddIndexColumn(#"Detected Type Mismatches", "Row Number" ,1),
		  #"Kept Errors" = Table.SelectRowsWithErrors(#"Added Index", {"Master Chain", "Chain", "Store Name", "Store Unique ID", "Store Format", "Address", "City", "St", "Zip", "Division/Group", "Region", "District", "District Manager", "Circan Mulo+ Market", "Store Tier", "Account ID", "Javelin Territory ID", "Change", "Effective Date", "SMM", "SSR", "SSR Name", "Master Chain - Copy", "SMM TerritorySort", "SMM Territory ", "Store Num", "JoinKey"}),
		  #"Reordered Columns" = Table.ReorderColumns(#"Kept Errors", {"Row Number", "Master Chain", "Chain", "Store Name", "Store Unique ID", "Store Format", "Address", "City", "St", "Zip", "Division/Group", "Region", "District", "District Manager", "Circan Mulo+ Market", "Store Tier", "Account ID", "Javelin Territory ID", "Change", "Effective Date", "SMM", "SSR", "SSR Name", "Master Chain - Copy", "SMM TerritorySort", "SMM Territory ", "Store Num", "JoinKey"})
		in
		  #"Reordered Columns"
	lineageTag: a6e82515-3515-4866-8b4f-c44477b22dfa
	queryGroup: 'Query Errors - 18-07-2025 14:41:38'

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

expression 'Suncare Coverage Planning (2)' = ```
		let
		    Source = Sql.Databases("45abcdnsw5ru7e2ughqdsi5nlu-u2sji3ypczjero2vy4kky64n2i.datawarehouse.fabric.microsoft.com"),
		    Bronze_Layer = Source{[Name="Bronze_Layer"]}[Data],
		    #"dbo_Suncare Coverage Planning_new" = Bronze_Layer{[Schema="dbo",Item="Suncare Coverage Planning_new"]}[Data],
		    #"Duplicated Column" = Table.DuplicateColumn(#"dbo_Suncare Coverage Planning_new", "Master_Chain", "Master Chain - Copy"),
		    #"Replaced Value" = Table.ReplaceValue(#"Duplicated Column","CVS Corp","CVS",Replacer.ReplaceText,{"Master Chain - Copy"}),
		    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","Walgreen Co","Walgreens",Replacer.ReplaceText,{"Master Chain - Copy"}),
		    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","Wal Mart","Walmart",Replacer.ReplaceText,{"Master Chain - Copy"}),
		    #"Filtered Rows" = Table.SelectRows(#"Replaced Value2", each true),
		    #"Added Conditional Column" = Table.AddColumn(#"Filtered Rows", "SMM_TerritorySort", each if [SMM] = "West" then 1 else if [SMM] = "Northeast" then 1 else if [SMM] = "Florida - East" then 1 else if [SMM] = "Florida - West" then 1 else if [SMM] = "Z No Cov" then 2 else null),
		    #"Added Conditional Column1" = Table.AddColumn(#"Added Conditional Column", "SMM Territory ", each if Text.Contains([SMM], "Cov") then [SMM] else "Covered"),
		    #"Split Column by Delimiter" = Table.SplitColumn(#"Added Conditional Column1", "Store_Num", Splitter.SplitTextByEachDelimiter({"#"}, QuoteStyle.Csv, false), {"Store Num.1", "Store Num.2"}),
		    #"Changed Type" = Table.TransformColumnTypes(#"Split Column by Delimiter",{{"Store Num.1", Int64.Type}, {"Store Num.2", type text}}),
		    #"Added Custom" = Table.AddColumn(#"Changed Type", "Separator", each "."),
		    #"Inserted Merged Column" = Table.AddColumn(#"Added Custom", "Store2", each Text.Combine({[Store Num.2], [Separator]}, ""), type text),
		    #"Added Conditional Column2" = Table.AddColumn(#"Inserted Merged Column", "Custom", each if [Store Num.2] = null then [Store Num.2] else [Store2]),
		    #"Removed Columns" = Table.RemoveColumns(#"Added Conditional Column2",{"Separator", "Store2", "Store Num.2"}),
		    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Removed Columns", {{"Store Num.1", type text}, {"Custom", type text}}, "en-IN"),{"Store Num.1", "Custom"},Combiner.CombineTextByDelimiter("", QuoteStyle.None),"Store Num"),
		    #"Trimmed Text1" = Table.TransformColumns(#"Merged Columns",{{"Master Chain - Copy", Text.Trim, type text}}),
		    #"Cleaned Text1" = Table.TransformColumns(#"Trimmed Text1",{{"Master Chain - Copy", Text.Clean, type text}}),
		    #"Changed Type1" = Table.TransformColumnTypes(#"Cleaned Text1",{{"Store Num", type number}}),
		    #"Merged Queries" = Table.NestedJoin(#"Changed Type1", {"Master Chain - Copy"}, RetailerOrder, {"Retailer"}, "RetailerOrder", JoinKind.RightOuter),
		    #"Expanded RetailerOrder" = Table.ExpandTableColumn(#"Merged Queries", "RetailerOrder", {"ReatilerOrder"}, {"ReatilerOrder"}),
		    #"Inserted Merged Column1" = Table.AddColumn(#"Expanded RetailerOrder", "JoinKey", each Text.Combine({Text.From([Store Num], "en-IN"), Text.From([ReatilerOrder], "en-IN")}, ""), type text),
		    #"Removed Columns1" = Table.RemoveColumns(#"Inserted Merged Column1",{"ReatilerOrder"}),
		    #"Changed Type2" = Table.TransformColumnTypes(#"Removed Columns1",{{"JoinKey", Int64.Type}}),
		    #"Renamed Columns" = Table.RenameColumns(#"Changed Type2",{{"Master_Chain", "Master Chain"}, {"Store_Name", "Store Name"}, {"Store_Unique_ID", "Store Unique ID"}, {"Store_Format", "Store Format"}, {"District_Manager", "District Manager"}, {"Circan_Mulo+_Market", "Circan Mulo+ Market"}, {"Store_Tier", "Store Tier"}, {"Account_ID", "Account ID"}, {"Javelin_Territory_ID", "Javelin Territory ID"}, {"Effective_Date", "Effective Date"}, {"SSR_Name", "SSR Name"}, {"SMM_TerritorySort", "SMM TerritorySort"}}),
		    #"Filtered Rows1" = Table.SelectRows(#"Renamed Columns", each true),
		    #"Replaced Value3" = Table.ReplaceValue(#"Filtered Rows1","#(00A0)#(00A0)","nan",Replacer.ReplaceText,{"District Manager"}),
		   //  #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","nan","(Blank)",Replacer.ReplaceText,{"Region"}),
		        #"Replaced 'nan' Except JoinKey" = Table.TransformColumns(#"Replaced Value3", 
		        List.Transform(
		            List.RemoveItems(Table.ColumnNames(#"Replaced Value3"), {"JoinKey","Region"}),
		            each {_, each if _ = "nan" then "" else _, type text}
		        ))
		in
		    #"Replaced 'nan' Except JoinKey"
		```
	lineageTag: f498c285-271a-4e5e-a105-53d02ed559c8
	queryGroup: Master

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

